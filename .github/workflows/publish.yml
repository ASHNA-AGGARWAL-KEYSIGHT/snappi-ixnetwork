# Build workflow does the following:
#   - checkout all files
#   - get the latest version number
#   - setup python 3.x env
#   - install python dependencies
#   - build python distributions
#   - create a tag and release
#   - upload assets to the release
#   - upload assets to pypi

name: Build

on: [push, pull_request, workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade jsonpath-ng
        python -m pip install --upgrade pyyaml
        python -m pip install --upgrade pytest
        python -m pip install --upgrade setuptools
        python -m pip install --upgrade wheel
        python -m pip install --upgrade twine
        python -m pip install --upgrade requests

    - name: Build distributions
      run: |
        python setup.py sdist --formats=gztar bdist_wheel --universal

    - name: Test whl distribution installation
      run: |
        pip install dist/*.whl

    - name: Get all changes
      id: file_changes
      uses: trilom/file-changes-action@v1.2.3

    - name: Output changed files
      id: changed_files
      run: echo ${{steps.file_changes.outputs.files_modified}}

    - name: Get VERSION number
      id: get_version
      if: true == contains(steps.file_changes.outputs.files_modified, 'VERSION')
      run: echo "::set-output name=version::$(cat VERSION)"

    - name: Create Release
      if: true == contains(steps.file_changes.outputs.files_modified, 'VERSION')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Assets To Release
      if: true == contains(steps.file_changes.outputs.files_modified, 'VERSION')
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: dist/*
        tag: v${{ steps.get_version.outputs.version }}
        overwrite: true
        file_glob: true   
        
    - name: Upload Assets to Pypi
      if: true == contains(steps.file_changes.outputs.files_modified, 'VERSION')
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
